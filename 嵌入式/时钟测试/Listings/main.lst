C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 13:03:18 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          typedef unsigned char uint8;
   3          typedef unsigned int uint16;
   4          
   5          sbit SDA = P3^5;  // 数据
   6          sbit SCK = P3^7;  // 时钟
   7          sbit RST = P3^4;  // DS1302复位(片选)
   8          sbit le = P1^0;
   9          
  10          uint8 time[7] = {50, 41, 20, 9, 8, 4, 12}; // 秒分时日月周年
  11          unsigned int poi[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
  12          unsigned int seg[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
  13          
  14          #define DS1302_W_ADDR 0x80
  15          #define DS1302_R_ADDR 0x81
  16          
  17          void ds1302_reset() {
  18   1          RST = 0; // 停止数据传送
  19   1          SCK = 0; // 时钟总线清零
  20   1          RST = 1; // 数据操作
  21   1      }
  22          
  23          // 写一个字节
  24          void ds1302_write_byte(uint8 dat) {
  25   1          uint8 i;
  26   1          for (i = 0; i < 8; i++) {
  27   2              SDA = dat & 0x01;
  28   2              SCK = 1;
  29   2              SCK = 0;
  30   2              dat >>= 1;
  31   2          }
  32   1      }
  33          
  34          uint8 ds1302_read_byte() {
  35   1          uint8 i, dat = 0; // 用dat存储读到的数据
  36   1          for (i = 0; i < 8; i++) {
  37   2              dat >>= 1;
  38   2              if (SDA == 1) dat |= 0x80; // 因为从低位开始读
  39   2              SCK = 1;
  40   2              SCK = 0;
  41   2          }
  42   1          return dat;
  43   1      }
  44          
  45          // 清除写保护
  46          void ds1302_clear_WP() {
  47   1          ds1302_reset();
  48   1          RST = 1;
  49   1          ds1302_write_byte(0x8E); // 写入地址
  50   1          ds1302_write_byte(0x00); // 写入数据
  51   1          SDA = 0;
  52   1          RST = 0;
  53   1      }
  54          
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 13:03:18 PAGE 2   

  55          // 设置写保护
  56          void ds1302_set_WP() {
  57   1          ds1302_reset();
  58   1          RST = 1;
  59   1          ds1302_write_byte(0x8E); // 写入地址
  60   1          ds1302_write_byte(0x80); // 写入数据
  61   1          SDA = 0;
  62   1          RST = 0;
  63   1      }
  64          
  65          // 写入ds1302
  66          void ds1302_write(uint8 addr, uint8 dat) {
  67   1          ds1302_reset();
  68   1          RST = 1;
  69   1          ds1302_write_byte(addr); // 写入地址
  70   1          ds1302_write_byte(dat); // 写入数据
  71   1          RST = 0;
  72   1          SDA = 0;
  73   1      }
  74          
  75          // 从ds1302读数据
  76          uint8 ds1302_read(uint8 addr) {
  77   1          uint8 temp = 0; // 存储读出来的数据
  78   1          ds1302_reset();
  79   1          RST = 1;
  80   1          ds1302_write_byte(addr); // 写入地址
  81   1          temp = ds1302_read_byte(); // 写入数据
  82   1          RST = 0;
  83   1          SDA = 0;
  84   1          return temp;
  85   1      }
  86          
  87          void delay(uint16 n) {
  88   1          while (n--);
  89   1      }
  90          
  91          // 设定时钟数据
  92          void set_time(uint8 *timedata) {
  93   1          uint8 i;
  94   1          uint8 temp = 0;
  95   1          for (i = 0; i < 7; i++) {
  96   2              temp = timedata[i] / 10;
  97   2              timedata[i] = timedata[i] % 10;
  98   2              timedata[i] = timedata[i] + temp * 16;
  99   2          }
 100   1          ds1302_clear_WP(); // 对ds1302操作前先将wp位清零
 101   1          temp = DS1302_W_ADDR; // 写入起始位置
 102   1          for (i = 0; i < 7; i++) {
 103   2              ds1302_write(temp, timedata[i]);
 104   2              temp += 2;
 105   2          }
 106   1          ds1302_set_WP();
 107   1      }
 108          
 109          // 读时钟数据（BCD格式）
 110          void read_time(uint8 *timedata) {
 111   1          uint8 i, temp;
 112   1          temp = DS1302_R_ADDR; // 读起始位置
 113   1          for (i = 0; i < 7; i++) {
 114   2              timedata[i] = ds1302_read(temp);
 115   2              temp += 2;
 116   2          }
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 13:03:18 PAGE 3   

 117   1      }
 118          
 119          /* UART初始化
 120           * 波特率：9600
 121           */
 122          void uart_init(void) {
 123   1          TMOD = 0x21;
 124   1          SCON = 0x50;
 125   1          TH1 = 0xFD;
 126   1          TL1 = 0xFD;
 127   1          TR1 = 1;
 128   1      }
 129          
 130          /* UART发送一字节 */
 131          void UART_Send_Byte(uint8 dat) {
 132   1          SBUF = dat;
 133   1          while (TI == 0);
 134   1          TI = 0;
 135   1      }
 136          
 137          /* 将数据转换成ASC码并通过UART发送出去 */
 138          void UART_Send_Dat(uint8 dat) {
 139   1          UART_Send_Byte(dat / 16 + '0');
 140   1          UART_Send_Byte(dat % 16 + '0');
 141   1      }
 142          
 143          void display(int p, int num) {
 144   1          P0 = 0xff;
 145   1          P0 = poi[p];
 146   1          le = 1;
 147   1          le = 0;
 148   1          P0 = seg[num];
 149   1          delay(1000);
 150   1      }
 151          
 152          void main() {
 153   1          uart_init();
 154   1          set_time(&time); // 设定时间值
 155   1      
 156   1          while (1) {
 157   2              read_time(&time); // 秒分时日月周年
 158   2      
 159   2              UART_Send_Dat(time[2]);
 160   2              display(7, time[2] / 10);
 161   2              display(6, time[2] % 10);
 162   2              UART_Send_Byte(':');
 163   2              UART_Send_Dat(time[1]);
 164   2              display(4, time[1] / 10);
 165   2              display(3, time[1] % 10);
 166   2              UART_Send_Byte(':');
 167   2              UART_Send_Dat(time[0]);
 168   2              display(1, time[0] / 10);
 169   2              display(0, time[0] % 10);
 170   2              UART_Send_Byte('\r');
 171   2              UART_Send_Byte('\n');
 172   2      
 173   2              delay(10000);
 174   2          }
 175   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 13:03:18 PAGE 4   

   CODE SIZE        =    495    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
