#include <stdio.h>
#include <stdlib.h>
//顺序表的定义：
#define ListSize 100		//表空间大小可根据实际需要而定，这里假设为100
typedef int DataType;		//DataType可以是任何相应的数据类型如int, float或char
typedef struct
{	DataType data[ListSize];	//向量data用于存放表结点
	int length;				//当前的表长度
}SeqList;

int main()
{
	void InsertList(SeqList *L,DataType x,int i);
	void PrintList(SeqList L);
	SeqList L;
	int i,n=10;
	DataType x;
	for (i=0;i<n;i++)
		L.data[i]=rand()%100;
	L.length=n;
	PrintList(L);			//打印顺序表
	printf("输入要插入的位置：");
	scanf("%d",&i);
	printf("输入要插入的元素：");
	scanf("%d",&x);
	InsertList(&L,x,i);		//顺序表插入
	PrintList(L);			//打印顺序表
	return 0;
}

//顺序表的插入：
void InsertList(SeqList *L,DataType x,int i)
{//将新结点x插入L所指的顺序表的第i个结点的位置上








老师说：void InsertList(LinkList head,DataType x,int i)
{//将值为x的新结点插入到带头结点的单链表head的第i个结点的位置上
	ListNode *p,*s;
	p=GetNode(head,i-1);	//寻找第i-1个结点
	if(p==NULL)
	{
		printf("插入位置非法\n");
		exit(0);
	}
	s=(ListNode *)malloc(sizeof(ListNode));	//生成新结点
	s->data=x;
	s->next=p->next;
	p->next=s;
}





}

//顺序表的打印：
void PrintList(SeqList L)
{	int i;
	for (i=0;i<L.length;i++)
		printf("%d  ",L.data[i]);
	printf("\n");
}
